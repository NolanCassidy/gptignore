The following text is a Git repository with code. The structure of the text are sections that begin with ----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the Git repository ends when the symbols --END-- are encountered. Any further text beyond --END-- are meant to be interpreted as instructions using the aforementioned Git repository as context.

----
bin\default-gptignore.txt
# Node.js dependencies
node_modules/

# Log files
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Dependency directories
bower_components/
jspm_packages/

# Build directories
build/
dist/
.next/

# Public folder
public/

# Temporary files
tmp/
temp/
*.tmp
*.temp

# Environment variable files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Cache files and directories
.cache/
.cache-loader/
.next/cache/

# Editor directories and files
.idea/
.vscode/
*.sublime-project
*.sublime-workspace

# OS generated files
.DS_Store
Thumbs.db

# Testing files
coverage/
*.test.js
*.spec.js
*.test.ts
*.spec.ts
cypress/

# Config files
*.config.js
*.config.json

# Next.js specific files
.next/static/
.next/server/
.next/export/

# Miscellaneous
*.log
*.bak
*.backup

package-lock.json
yarn.lock
yarn-error.log
.git/
.gitignore

# gptignore
.gptignore
ai/

# Image/Video files
*.png
*.jpg
*.jpeg
*.gif
*.svg
*.ico
*.webp
*.mp4
*.webm
*.mp3


----
bin\gptignore.js
#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const cliProgress = require("cli-progress"); // Import cli-progress

// Path to the default .gptignore template
const defaultGptignorePath = path.join(__dirname, "default-gptignore.txt");

// Function to read .gptignore and return ignored paths
const getIgnoredPaths = () => {
  const currentDir = process.cwd();
  const ignoreFilePath = path.join(currentDir, ".gptignore");
  let ignoredPaths = [];

  console.log(`Looking for .gptignore file at: ${ignoreFilePath}`);

  if (fs.existsSync(ignoreFilePath)) {
    console.log(".gptignore file found");
    const ignoreContent = fs.readFileSync(ignoreFilePath, "utf-8");
    ignoredPaths = ignoreContent
      .split("\n")
      .map((line) => line.trim())
      .filter((line) => line && !line.startsWith("#")); // Ignore empty lines and comments
  } else {
    console.log(".gptignore file not found");
  }

  return ignoredPaths;
};

// Improved function to check if a file or directory should be ignored
const shouldIgnore = (filePath, ignoredPaths) => {
  const normalizedFilePath = filePath.replace(/\\/g, "/");
  return ignoredPaths.some((pattern) => {
    const normalizedPattern = pattern.replace(/\\/g, "/");
    if (normalizedPattern.endsWith("/")) {
      // Directory pattern: check if the file path starts with the directory path
      return normalizedFilePath.startsWith(normalizedPattern);
    }
    // For files, use minimatch-like behavior
    const regexPattern = new RegExp(
      "^" + normalizedPattern.replace(/\*/g, ".*").replace(/\?/g, ".") + "$"
    );
    return regexPattern.test(normalizedFilePath);
  });
};

// Recursively get all files and folders in a directory, strictly filtering out ignored ones
const getAllFilesAndFolders = (
  dirPath,
  arrayOfFiles = [],
  ignoredPaths = []
) => {
  const files = fs.readdirSync(dirPath);

  for (const file of files) {
    const filePath = path.join(dirPath, file);
    const relativeFilePath = path.relative(process.cwd(), filePath);

    if (shouldIgnore(relativeFilePath, ignoredPaths)) {
      // console.log(`Ignoring: ${relativeFilePath}`);
      continue;
    }

    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      getAllFilesAndFolders(filePath, arrayOfFiles, ignoredPaths);
    } else {
      // console.log(`Adding: ${relativeFilePath}`);
      arrayOfFiles.push(filePath);
    }
  }

  return arrayOfFiles;
};

// Generate the AI file
const generateAIFile = (
  inputPath = process.cwd(),
  outputFileName = "codebase.txt"
) => {
  const rootDir = path.resolve(inputPath);
  const outputDir = path.join(process.cwd(), "gpt");
  const outputFilePath = path.join(outputDir, outputFileName);

  console.log(`Current working directory: ${rootDir}`);

  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir);
    console.log(`Created output directory: ${outputDir}`);
  }

  const ignoredPaths = getIgnoredPaths();
  const allFiles = getAllFilesAndFolders(rootDir, [], ignoredPaths);

  let content =
    "The following text is a Git repository with code. The structure of the text are sections that begin with ----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the Git repository ends when the symbols --END-- are encountered. Any further text beyond --END-- are meant to be interpreted as instructions using the aforementioned Git repository as context.\n\n";

  // Create a new progress bar instance
  const progressBar = new cliProgress.SingleBar(
    {},
    cliProgress.Presets.shades_classic
  );

  // Start the progress bar
  progressBar.start(allFiles.length, 0);

  allFiles.forEach((file, index) => {
    const relativePath = path.relative(rootDir, file);
    const fileContents = fs.readFileSync(file, "utf8");
    content += `----\n${relativePath}\n${fileContents}\n\n`;

    // Update the progress bar
    progressBar.update(index + 1);
  });

  // Stop the progress bar
  progressBar.stop();

  content += "--END--\n";

  fs.writeFileSync(outputFilePath, content);
  console.log(`AI file generated at ${outputFilePath}`);
};

// Initialize the .gptignore file
const initGptignore = () => {
  const targetPath = path.join(process.cwd(), ".gptignore");

  if (fs.existsSync(targetPath)) {
    console.log(".gptignore already exists. No changes made.");
    return;
  }

  fs.copyFileSync(defaultGptignorePath, targetPath);
  console.log(".gptignore file has been created with default content.");
};

// Main CLI handler
const main = () => {
  const [, , command, ...args] = process.argv;

  switch (command) {
    case "generate":
      const inputPath = args[0] || process.cwd();
      const outputFileName = args[1] || "codebase.txt";
      generateAIFile(inputPath, outputFileName);
      break;
    case "init":
      initGptignore();
      break;
    default:
      console.log(`Unknown command: ${command}`);
      console.log("Available commands: generate, init");
      break;
  }
};

// Run the CLI
main();


----
gpt\codebase.txt
The following text is a Git repository with code. The structure of the text are sections that begin with ----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the Git repository ends when the symbols --END-- are encountered. Any further text beyond --END-- are meant to be interpreted as instructions using the aforementioned Git repository as context.

----
bin\default-gptignore.txt
# Node.js dependencies
node_modules/

# Log files
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Dependency directories
bower_components/
jspm_packages/

# Build directories
build/
dist/
.next/

# Public folder
public/

# Temporary files
tmp/
temp/
*.tmp
*.temp

# Environment variable files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Cache files and directories
.cache/
.cache-loader/
.next/cache/

# Editor directories and files
.idea/
.vscode/
*.sublime-project
*.sublime-workspace

# OS generated files
.DS_Store
Thumbs.db

# Testing files
coverage/
*.test.js
*.spec.js
*.test.ts
*.spec.ts
cypress/

# Config files
*.config.js
*.config.json

# Next.js specific files
.next/static/
.next/server/
.next/export/

# Miscellaneous
*.log
*.bak
*.backup

package-lock.json
yarn.lock
yarn-error.log
.git/
.gitignore

# gptignore
.gptignore
ai/

# Image/Video files
*.png
*.jpg
*.jpeg
*.gif
*.svg
*.ico
*.webp
*.mp4
*.webm
*.mp3


----
bin\gptignore.js
#!/usr/bin/env node

const fs = require("fs");
const path = require("path");

// Path to the default .gptignore template
const defaultGptignorePath = path.join(__dirname, "default-gptignore.txt");

// Function to read .gptignore and return ignored paths
const getIgnoredPaths = () => {
  const currentDir = process.cwd();
  const ignoreFilePath = path.join(currentDir, ".gptignore");
  let ignoredPaths = [];

  console.log(`Looking for .gptignore file at: ${ignoreFilePath}`);

  if (fs.existsSync(ignoreFilePath)) {
    console.log(".gptignore file found");
    const ignoreContent = fs.readFileSync(ignoreFilePath, "utf-8");
    ignoredPaths = ignoreContent
      .split("\n")
      .map((line) => line.trim())
      .filter((line) => line && !line.startsWith("#")); // Ignore empty lines and comments
  } else {
    console.log(".gptignore file not found");
  }

  return ignoredPaths;
};

// Improved function to check if a file or directory should be ignored
const shouldIgnore = (filePath, ignoredPaths) => {
  const normalizedFilePath = filePath.replace(/\\/g, "/");
  return ignoredPaths.some((pattern) => {
    const normalizedPattern = pattern.replace(/\\/g, "/");
    if (normalizedPattern.endsWith("/")) {
      // Directory pattern: check if the file path starts with the directory path
      return normalizedFilePath.startsWith(normalizedPattern);
    }
    // For files, use minimatch-like behavior
    const regexPattern = new RegExp(
      "^" + normalizedPattern.replace(/\*/g, ".*").replace(/\?/g, ".") + "$"
    );
    return regexPattern.test(normalizedFilePath);
  });
};

// Recursively get all files and folders in a directory, strictly filtering out ignored ones
const getAllFilesAndFolders = (
  dirPath,
  arrayOfFiles = [],
  ignoredPaths = []
) => {
  const files = fs.readdirSync(dirPath);

  for (const file of files) {
    const filePath = path.join(dirPath, file);
    const relativeFilePath = path.relative(process.cwd(), filePath);

    if (shouldIgnore(relativeFilePath, ignoredPaths)) {
      // console.log(`Ignoring: ${relativeFilePath}`);
      continue;
    }

    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      getAllFilesAndFolders(filePath, arrayOfFiles, ignoredPaths);
    } else {
      // console.log(`Adding: ${relativeFilePath}`);
      arrayOfFiles.push(filePath);
    }
  }

  return arrayOfFiles;
};

// Generate the AI file
const generateAIFile = (
  inputPath = process.cwd(),
  outputFileName = "codebase.txt"
) => {
  const rootDir = path.resolve(inputPath);
  const outputDir = path.join(process.cwd(), "gpt");
  const outputFilePath = path.join(outputDir, outputFileName);

  console.log(`Current working directory: ${rootDir}`);

  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir);
    console.log(`Created output directory: ${outputDir}`);
  }

  const ignoredPaths = getIgnoredPaths();
  const allFiles = getAllFilesAndFolders(rootDir, [], ignoredPaths);

  let content =
    "The following text is a Git repository with code. The structure of the text are sections that begin with ----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the Git repository ends when the symbols --END-- are encountered. Any further text beyond --END-- are meant to be interpreted as instructions using the aforementioned Git repository as context.\n\n";

  allFiles.forEach((file) => {
    const relativePath = path.relative(rootDir, file);
    const fileContents = fs.readFileSync(file, "utf8");
    content += `----\n${relativePath}\n${fileContents}\n\n`;
  });

  content += "--END--\n";

  fs.writeFileSync(outputFilePath, content);
  console.log(`AI file generated at ${outputFilePath}`);
};

// Initialize the .gptignore file
const initGptignore = () => {
  const targetPath = path.join(process.cwd(), ".gptignore");

  if (fs.existsSync(targetPath)) {
    console.log(".gptignore already exists. No changes made.");
    return;
  }

  fs.copyFileSync(defaultGptignorePath, targetPath);
  console.log(".gptignore file has been created with default content.");
};

// Main CLI handler
const main = () => {
  const [, , command, ...args] = process.argv;

  switch (command) {
    case "generate":
      const inputPath = args[0] || process.cwd();
      const outputFileName = args[1] || "codebase.txt";
      generateAIFile(inputPath, outputFileName);
      break;
    case "init":
      initGptignore();
      break;
    default:
      console.log(`Unknown command: ${command}`);
      console.log("Available commands: generate, init");
      break;
  }
};

// Run the CLI
main();


----
package.json
{
  "name": "gptignore",
  "version": "1.1.1",
  "description": "A CLI tool to generate a comprehensive AI-friendly text file, including folder structures and file contents, while respecting a custom .gptignore file for exclusions.",
  "bin": {
    "gptignore": "./bin/gptignore.js"
  },
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node bin/gptignore.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/NolanCassidy/gptignore.git"
  },
  "author": "Nolan Cassidy",
  "license": "ISC"
}


----
README.md
# GPTIgnore

**Tired of struggling to send your code to an LLM?** GPTIgnore makes it simple! Whether you're looking to upload your entire codebase or specific sections to a language model, we've got you covered. Our tool generates a clean, organized representation of your codebase, so you can easily share it with any LLM. **Say goodbye to the hassle of manually preparing files!**

## Features

- **Generate a codebase summary**: Create a detailed text file (`codebase.txt`) containing the file paths and contents of all relevant files in the project, excluding those specified in `.gptignore`.
- **Initialize a `.gptignore` file**: Generate a starter `.gptignore` file with common patterns to ignore files and directories.

## Installation

To install GPTIgnore globally, use npm:

```bash
npm install -g gptignore
```

## Usage

GPTIgnore provides two main commands: `generate` and `init`.

### Generate with Custom Path and Output File Name

The `generate` command can now take optional arguments to specify a custom input path and output file name. This allows you to generate a summary for a specific directory within your project and customize the name of the output file.

#### Usage

```bash
gptignore generate [path] [outputFileName]
```

- **`path`**: (Optional) The directory to process. Defaults to the current working directory if not specified.
- **`outputFileName`**: (Optional) The name of the output file. Defaults to `codebase.txt` if not specified.

#### Examples

- **Generate for Current Directory**:

  ```bash
  gptignore generate
  ```

  This will generate `codebase.txt` in the `gpt` directory from the current working directory.

- **Generate for a Specific Directory**:

  ```bash
  gptignore generate ./src
  ```

  This will generate `codebase.txt` from the `src` directory, summarizing only the contents of that directory.

- **Generate with Specific Output File Name**:

  ```bash
  gptignore generate ./src custom-output.txt
  ```

  This will generate `custom-output.txt` in the `gpt` directory, containing data from the `src` directory.

By utilizing these options, you can easily focus on specific parts of your project and organize your output files as needed.

#### Example

Running the above command will produce a `codebase.txt` file with the following structure:

```
The following text is a Git repository with code. The structure of the text are sections that begin with ----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the Git repository ends when the symbols --END-- are encountered. Any further text beyond --END-- are meant to be interpreted as instructions using the aforementioned Git repository as context.

----
src/index.js
console.log('Hello, world!');

----
README.md
# My Project
This is a README file.

--END--
```

### Init

The `init` command initializes a `.gptignore` file in the project directory with a set of default patterns to ignore. If a `.gptignore` file already exists, the command will not overwrite it.

```bash
gptignore init
```

The default `.gptignore` file used can be found [here](bin/default-gptignore.txt).

## Future Features and Roadmap

- [x] **Generate codebase file**: Automatically create a summary of your project's codebase, ready for upload to an LLM.
- [ ] **Custom environment variables**: Allow users to set their own environment variables and configurations.
- [ ] **LLM Integration**: Chat directly with advanced models like Gemini from the command line.
- [ ] **Multiple output files**: Support for generating multiple files, breaking down the codebase into sub-repositories (e.g., `client`, `server`) based on a configuration.
- [ ] **Configurable outputs**: Enable users to customize the output structure and contents based on their specific needs.

We’re constantly working on new features to make GPTIgnore the best tool for interacting with LLMs and managing your codebase. **Stay tuned for more exciting updates!**

## Links

- **npm**: [GPTIgnore on npm](https://www.npmjs.com/package/gptignore)
- **GitHub**: [GPTIgnore on GitHub](https://github.com/NolanCassidy/gptignore)

## Contributing

Contributions are welcome! Please open an issue or submit a pull request on the [GitHub repository](https://github.com/NolanCassidy/gptignore) if you have suggestions or improvements.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

```

```


--END--


----
package.json
{
  "name": "gptignore",
  "version": "1.1.1",
  "description": "A CLI tool to generate a comprehensive AI-friendly text file, including folder structures and file contents, while respecting a custom .gptignore file for exclusions.",
  "bin": {
    "gptignore": "./bin/gptignore.js"
  },
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node bin/gptignore.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/NolanCassidy/gptignore.git"
  },
  "author": "Nolan Cassidy",
  "license": "ISC",
  "dependencies": {
    "cli-progress": "^3.12.0"
  }
}


----
README.md
# GPTIgnore

**Tired of struggling to send your code to an LLM?** GPTIgnore makes it simple! Whether you're looking to upload your entire codebase or specific sections to a language model, we've got you covered. Our tool generates a clean, organized representation of your codebase, so you can easily share it with any LLM. **Say goodbye to the hassle of manually preparing files!**

## Features

- **Generate a codebase summary**: Create a detailed text file (`codebase.txt`) containing the file paths and contents of all relevant files in the project, excluding those specified in `.gptignore`.
- **Initialize a `.gptignore` file**: Generate a starter `.gptignore` file with common patterns to ignore files and directories.

## Installation

To install GPTIgnore globally, use npm:

```bash
npm install -g gptignore
```

## Usage

GPTIgnore provides two main commands: `generate` and `init`.

### Generate with Custom Path and Output File Name

The `generate` command can now take optional arguments to specify a custom input path and output file name. This allows you to generate a summary for a specific directory within your project and customize the name of the output file.

#### Usage

```bash
gptignore generate [path] [outputFileName]
```

- **`path`**: (Optional) The directory to process. Defaults to the current working directory if not specified.
- **`outputFileName`**: (Optional) The name of the output file. Defaults to `codebase.txt` if not specified.

#### Examples

- **Generate for Current Directory**:

  ```bash
  gptignore generate
  ```

  This will generate `codebase.txt` in the `gpt` directory from the current working directory.

- **Generate for a Specific Directory**:

  ```bash
  gptignore generate ./src
  ```

  This will generate `codebase.txt` from the `src` directory, summarizing only the contents of that directory.

- **Generate with Specific Output File Name**:

  ```bash
  gptignore generate ./src custom-output.txt
  ```

  This will generate `custom-output.txt` in the `gpt` directory, containing data from the `src` directory.

By utilizing these options, you can easily focus on specific parts of your project and organize your output files as needed.

#### Example

Running the above command will produce a `codebase.txt` file with the following structure:

```
The following text is a Git repository with code. The structure of the text are sections that begin with ----, followed by a single line containing the file path and file name, followed by a variable amount of lines containing the file contents. The text representing the Git repository ends when the symbols --END-- are encountered. Any further text beyond --END-- are meant to be interpreted as instructions using the aforementioned Git repository as context.

----
src/index.js
console.log('Hello, world!');

----
README.md
# My Project
This is a README file.

--END--
```

### Init

The `init` command initializes a `.gptignore` file in the project directory with a set of default patterns to ignore. If a `.gptignore` file already exists, the command will not overwrite it.

```bash
gptignore init
```

The default `.gptignore` file used can be found [here](bin/default-gptignore.txt).

## Future Features and Roadmap

- [x] **Generate codebase file**: Automatically create a summary of your project's codebase, ready for upload to an LLM.
- [ ] **Custom environment variables**: Allow users to set their own environment variables and configurations.
- [ ] **LLM Integration**: Chat directly with advanced models like Gemini from the command line.
- [ ] **Multiple output files**: Support for generating multiple files, breaking down the codebase into sub-repositories (e.g., `client`, `server`) based on a configuration.
- [ ] **Configurable outputs**: Enable users to customize the output structure and contents based on their specific needs.

We’re constantly working on new features to make GPTIgnore the best tool for interacting with LLMs and managing your codebase. **Stay tuned for more exciting updates!**

## Links

- **npm**: [GPTIgnore on npm](https://www.npmjs.com/package/gptignore)
- **GitHub**: [GPTIgnore on GitHub](https://github.com/NolanCassidy/gptignore)

## Contributing

Contributions are welcome! Please open an issue or submit a pull request on the [GitHub repository](https://github.com/NolanCassidy/gptignore) if you have suggestions or improvements.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

```

```


--END--
